
AVRASM ver. 2.1.30  D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm Fri Dec 31 15:06:33 2021

D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1088): warning: Register r4 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1089): warning: Register r5 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1090): warning: Register r6 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1091): warning: Register r7 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1092): warning: Register r9 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1093): warning: Register r8 already defined by the .DEF directive
D:\University\All_Projects\micro\code_vision\clock_lcd\codeVision\Debug\List\clock_cv.asm(1094): warning: Register r11 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _min=R4
                 	.DEF _min_msb=R5
                 	.DEF _hour=R6
                 	.DEF _hour_msb=R7
                 	.DEF __lcd_x=R9
                 	.DEF __lcd_y=R8
                 	.DEF __lcd_maxx=R11
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 004e 	JMP  __RESET
000002 940c 007b 	JMP  _EXT_INT0_isr
000004 940c 008b 	JMP  _EXT_INT1_isr
000006 940c 0000 	JMP  0x00
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _MAX_VALUES:
00002a 003c
00002b 003c
00002c 0019      	.DB  0x3C,0x0,0x3C,0x0,0x19,0x0
                 _tbl10_G100:
00002d 2710
00002e 03e8
00002f 0064
000030 000a      	.DB  0x10,0x27,0xE8,0x3,0x64,0x0,0xA,0x0
000031 0001      	.DB  0x1,0x0
                 _tbl16_G100:
000032 1000
000033 0100
000034 0010
000035 0001      	.DB  0x0,0x10,0x0,0x1,0x10,0x0,0x1,0x0
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000036 0000
000037 0000      	.DB  0x0,0x0,0x0,0x0
                 
                 _0x0:
000038 3025
000039 6432
00003a 253a
00003b 3230      	.DB  0x25,0x30,0x32,0x64,0x3A,0x25,0x30,0x32
00003c 3a64
00003d 3025
00003e 6432
00003f 2500      	.DB  0x64,0x3A,0x25,0x30,0x32,0x64,0x0,0x25
000040 3230
000041 3a64
000042 3025
000043 6432      	.DB  0x30,0x32,0x64,0x3A,0x25,0x30,0x32,0x64
000044 303a
000045 0030      	.DB  0x3A,0x30,0x30,0x0
                 _0x2020003:
000046 c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000047 0004      	.DW  0x04
000048 0004      	.DW  0x04
000049 006c      	.DW  __REG_VARS*2
                 
00004a 0002      	.DW  0x02
00004b 028e      	.DW  __base_y_G101
00004c 008c      	.DW  _0x2020003*2
                 
                 _0xFFFFFFFF:
00004d 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
00004e 94f8      	CLI
00004f 27ee      	CLR  R30
000050 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
000051 e0f1      	LDI  R31,1
000052 bffb      	OUT  GICR,R31
000053 bfeb      	OUT  GICR,R30
000054 bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
000055 e08d      	LDI  R24,(14-2)+1
000056 e0a2      	LDI  R26,2
000057 27bb      	CLR  R27
                 __CLEAR_REG:
000058 93ed      	ST   X+,R30
000059 958a      	DEC  R24
00005a f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
00005b e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
00005c e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
00005d e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
00005e 93ed      	ST   X+,R30
00005f 9701      	SBIW R24,1
000060 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
000061 e8ee      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
000062 e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
000063 9185      	LPM  R24,Z+
000064 9195      	LPM  R25,Z+
000065 9700      	SBIW R24,0
000066 f061      	BREQ __GLOBAL_INI_END
000067 91a5      	LPM  R26,Z+
000068 91b5      	LPM  R27,Z+
000069 9005      	LPM  R0,Z+
00006a 9015      	LPM  R1,Z+
00006b 01bf      	MOVW R22,R30
00006c 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
00006d 9005      	LPM  R0,Z+
00006e 920d      	ST   X+,R0
00006f 9701      	SBIW R24,1
000070 f7e1      	BRNE __GLOBAL_INI_LOOP
000071 01fb      	MOVW R30,R22
000072 cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
000073 e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
000074 bfed      	OUT  SPL,R30
000075 e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
000076 bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
000077 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
000078 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
000079 940c 00c0 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <delay.h>
                 ;#include <stdio.h>
                 ;#include <alcd.h>
                 ;#include <stdbool.h>
                 ;
                 ;char buffer[20];
                 ;char buffer_2[20];
                 ;
                 ;// _clock[0] = seconds
                 ;// _clock[1] = minutes
                 ;// _clock[2] = hours
                 ;int _clock[3]= {0, 0, 0};
                 ;
                 ;// MAX_VALUES[0] = MAX seconds
                 ;// MAX_VALUES[1] = MAX minutes
                 ;// MAX_VALUES[2] = MAX hours
                 ;
                 ;
                 ;int min = 0;
                 ;int hour = 0;
                 ;
                 ;
                 ;
                 ;interrupt [EXT_INT0] void EXT_INT0_isr(void)
                 ; 0000 001A {
                 
                 	.CSEG
                 _EXT_INT0_isr:
                 ; .FSTART _EXT_INT0_isr
00007b 93ea      	ST   -Y,R30
00007c 93fa      	ST   -Y,R31
00007d b7ef      	IN   R30,SREG
00007e 93ea      	ST   -Y,R30
                 ; 0000 001B     if(min < 59)
00007f e3eb      	LDI  R30,LOW(59)
000080 e0f0      	LDI  R31,HIGH(59)
000081 164e      	CP   R4,R30
000082 065f      	CPC  R5,R31
000083 f424      	BRGE _0x3
                 ; 0000 001C         min++;
000084 01f2      	MOVW R30,R4
000085 9631      	ADIW R30,1
000086 012f      	MOVW R4,R30
                 ; 0000 001D 
                 ; 0000 001E     else
000087 c002      	RJMP _0x4
                 _0x3:
                 ; 0000 001F         min = 0;
000088 2444      	CLR  R4
000089 2455      	CLR  R5
                 ; 0000 0020 }
                 _0x4:
00008a c00f      	RJMP _0x12
                 ; .FEND
                 ;
                 ;interrupt [EXT_INT1] void EXT_INT1_isr(void)
                 ; 0000 0023 {
                 _EXT_INT1_isr:
                 ; .FSTART _EXT_INT1_isr
00008b 93ea      	ST   -Y,R30
00008c 93fa      	ST   -Y,R31
00008d b7ef      	IN   R30,SREG
00008e 93ea      	ST   -Y,R30
                 ; 0000 0024     if(hour < 23)
00008f e1e7      	LDI  R30,LOW(23)
000090 e0f0      	LDI  R31,HIGH(23)
000091 166e      	CP   R6,R30
000092 067f      	CPC  R7,R31
000093 f424      	BRGE _0x5
                 ; 0000 0025         hour++;
000094 01f3      	MOVW R30,R6
000095 9631      	ADIW R30,1
000096 013f      	MOVW R6,R30
                 ; 0000 0026 
                 ; 0000 0027     else
000097 c002      	RJMP _0x6
                 _0x5:
                 ; 0000 0028         hour = 0;
000098 2466      	CLR  R6
000099 2477      	CLR  R7
                 ; 0000 0029 }
                 _0x6:
                 _0x12:
00009a 91e9      	LD   R30,Y+
00009b bfef      	OUT  SREG,R30
00009c 91f9      	LD   R31,Y+
00009d 91e9      	LD   R30,Y+
00009e 9518      	RETI
                 ; .FEND
                 ;
                 ;const int MAX_VALUES[3] = {60 ,60 ,25};
                 ;
                 ;bool check_clock (int index)
                 ; 0000 002E {
                 _check_clock:
                 ; .FSTART _check_clock
                 ; 0000 002F     return _clock[index] == MAX_VALUES[index];
00009f 940e 03a6 	CALL SUBOPT_0x0
                 ;	index -> Y+0
0000a1 916d      	LD   R22,X+
0000a2 917c      	LD   R23,X
0000a3 81e8      	LD   R30,Y
0000a4 81f9      	LDD  R31,Y+1
0000a5 e5a4      	LDI  R26,LOW(_MAX_VALUES*2)
0000a6 e0b0      	LDI  R27,HIGH(_MAX_VALUES*2)
0000a7 0fee      	LSL  R30
0000a8 1fff      	ROL  R31
0000a9 0fea      	ADD  R30,R26
0000aa 1ffb      	ADC  R31,R27
0000ab 940e 041b 	CALL __GETW1PF
0000ad 01db      	MOVW R26,R22
0000ae 940e 0411 	CALL __EQW12
0000b0 940c 032c 	JMP  _0x2080002
                 ; 0000 0030 }
                 ; .FEND
                 ;void set_zero(int index)
                 ; 0000 0032 {
                 _set_zero:
                 ; .FSTART _set_zero
                 ; 0000 0033     _clock[index] = 0;
0000b2 940e 03a6 	CALL SUBOPT_0x0
                 ;	index -> Y+0
0000b4 e0e0      	LDI  R30,LOW(0)
0000b5 e0f0      	LDI  R31,HIGH(0)
0000b6 93ed      	ST   X+,R30
0000b7 93fc      	ST   X,R31
                 ; 0000 0034 }
0000b8 940c 032c 	JMP  _0x2080002
                 ; .FEND
                 ;void increase_clock(int index)
                 ; 0000 0036 {
                 _increase_clock:
                 ; .FSTART _increase_clock
                 ; 0000 0037      _clock[index]++;
0000ba 940e 03a6 	CALL SUBOPT_0x0
                 ;	index -> Y+0
0000bc 940e 03b1 	CALL SUBOPT_0x1
                 ; 0000 0038 }
0000be 940c 032c 	JMP  _0x2080002
                 ; .FEND
                 ;
                 ;void main (void)
                 ; 0000 003B {
                 _main:
                 ; .FSTART _main
                 ; 0000 003C     //LCD PORT - output
                 ; 0000 003D     PORTA=0X00;
0000c0 e0e0      	LDI  R30,LOW(0)
0000c1 bbeb      	OUT  0x1B,R30
                 ; 0000 003E     DDRA=0XFF;
0000c2 efef      	LDI  R30,LOW(255)
0000c3 bbea      	OUT  0x1A,R30
                 ; 0000 003F     PORTD=0X0C;
0000c4 e0ec      	LDI  R30,LOW(12)
0000c5 bbe2      	OUT  0x12,R30
                 ; 0000 0040     DDRD=0X00;
0000c6 e0e0      	LDI  R30,LOW(0)
0000c7 bbe1      	OUT  0x11,R30
                 ; 0000 0041 
                 ; 0000 0042     GICR|=0XC0;
0000c8 b7eb      	IN   R30,0x3B
0000c9 6ce0      	ORI  R30,LOW(0xC0)
0000ca bfeb      	OUT  0x3B,R30
                 ; 0000 0043     MCUCR=0X0A;
0000cb e0ea      	LDI  R30,LOW(10)
0000cc bfe5      	OUT  0x35,R30
                 ; 0000 0044     MCUCSR=0X00;
0000cd e0e0      	LDI  R30,LOW(0)
0000ce bfe4      	OUT  0x34,R30
                 ; 0000 0045     GIFR=0XC0;
0000cf ece0      	LDI  R30,LOW(192)
0000d0 bfea      	OUT  0x3A,R30
                 ; 0000 0046 
                 ; 0000 0047     lcd_init(20);
0000d1 e1a4      	LDI  R26,LOW(20)
0000d2 940e 0360 	CALL _lcd_init
                 ; 0000 0048     lcd_clear();
0000d4 940e 032e 	CALL _lcd_clear
                 ; 0000 0049 
                 ; 0000 004A     #asm("sei")
0000d6 9478      	sei
                 ; 0000 004B     while(1)
                 _0x7:
                 ; 0000 004C     {
                 ; 0000 004D         delay_ms(1000);
0000d7 eea8      	LDI  R26,LOW(1000)
0000d8 e0b3      	LDI  R27,HIGH(1000)
0000d9 940e 03fa 	CALL _delay_ms
                 ; 0000 004E         increase_clock(0);
0000db e0a0      	LDI  R26,LOW(0)
0000dc e0b0      	LDI  R27,0
0000dd dfdc      	RCALL _increase_clock
                 ; 0000 004F         if(check_clock(0))
0000de e0a0      	LDI  R26,LOW(0)
0000df 940e 03b7 	CALL SUBOPT_0x2
0000e1 f031      	BREQ _0xA
                 ; 0000 0050         {
                 ; 0000 0051              increase_clock(1);
0000e2 e0a1      	LDI  R26,LOW(1)
0000e3 e0b0      	LDI  R27,0
0000e4 dfd5      	RCALL _increase_clock
                 ; 0000 0052              set_zero(0);
0000e5 e0a0      	LDI  R26,LOW(0)
0000e6 e0b0      	LDI  R27,0
0000e7 dfca      	RCALL _set_zero
                 ; 0000 0053         }
                 ; 0000 0054         if(check_clock(1))
                 _0xA:
0000e8 e0a1      	LDI  R26,LOW(1)
0000e9 940e 03b7 	CALL SUBOPT_0x2
0000eb f031      	BREQ _0xB
                 ; 0000 0055         {
                 ; 0000 0056             increase_clock(2);
0000ec e0a2      	LDI  R26,LOW(2)
0000ed e0b0      	LDI  R27,0
0000ee dfcb      	RCALL _increase_clock
                 ; 0000 0057             set_zero(1);
0000ef e0a1      	LDI  R26,LOW(1)
0000f0 e0b0      	LDI  R27,0
0000f1 dfc0      	RCALL _set_zero
                 ; 0000 0058         }
                 ; 0000 0059 
                 ; 0000 005A         if(check_clock(2))
                 _0xB:
0000f2 e0a2      	LDI  R26,LOW(2)
0000f3 940e 03b7 	CALL SUBOPT_0x2
0000f5 f049      	BREQ _0xC
                 ; 0000 005B         {
                 ; 0000 005C             set_zero(0);
0000f6 e0a0      	LDI  R26,LOW(0)
0000f7 e0b0      	LDI  R27,0
0000f8 dfb9      	RCALL _set_zero
                 ; 0000 005D             set_zero(1);
0000f9 e0a1      	LDI  R26,LOW(1)
0000fa e0b0      	LDI  R27,0
0000fb dfb6      	RCALL _set_zero
                 ; 0000 005E             set_zero(2);
0000fc e0a2      	LDI  R26,LOW(2)
0000fd e0b0      	LDI  R27,0
0000fe dfb3      	RCALL _set_zero
                 ; 0000 005F         }
                 ; 0000 0060 
                 ; 0000 0061         lcd_clear();
                 _0xC:
0000ff 940e 032e 	CALL _lcd_clear
                 ; 0000 0062         lcd_gotoxy(4,0);
000101 e0e4      	LDI  R30,LOW(4)
000102 93ea      	ST   -Y,R30
000103 e0a0      	LDI  R26,LOW(0)
000104 940e 0321 	CALL _lcd_gotoxy
                 ; 0000 0063         sprintf(buffer,"%02d:%02d:%02d", _clock[2], _clock[1], _clock[0]);
000106 e6e0      	LDI  R30,LOW(_buffer)
000107 e0f2      	LDI  R31,HIGH(_buffer)
000108 93fa      	ST   -Y,R31
000109 93ea      	ST   -Y,R30
                +
00010a e7e0     +LDI R30 , LOW ( 2 * _0x0 + ( 0 ) )
00010b e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW1FN _0x0,0
00010c 93fa      	ST   -Y,R31
00010d 93ea      	ST   -Y,R30
                +
00010e 91e0 028c+LDS R30 , __clock + ( 4 )
000110 91f0 028d+LDS R31 , __clock + ( 4 ) + 1
                 	__GETW1MN __clock,4
000112 940e 03bc 	CALL SUBOPT_0x3
                +
000114 91e0 028a+LDS R30 , __clock + ( 2 )
000116 91f0 028b+LDS R31 , __clock + ( 2 ) + 1
                 	__GETW1MN __clock,2
000118 940e 03bc 	CALL SUBOPT_0x3
00011a 91e0 0288 	LDS  R30,__clock
00011c 91f0 0289 	LDS  R31,__clock+1
00011e 940e 03bc 	CALL SUBOPT_0x3
000120 e08c      	LDI  R24,12
000121 940e 02cd 	CALL _sprintf
000123 9660      	ADIW R28,16
                 ; 0000 0064         lcd_puts(buffer);
000124 e6a0      	LDI  R26,LOW(_buffer)
000125 e0b2      	LDI  R27,HIGH(_buffer)
000126 940e 034f 	CALL _lcd_puts
                 ; 0000 0065 
                 ; 0000 0066         lcd_gotoxy(4,1);
000128 e0e4      	LDI  R30,LOW(4)
000129 93ea      	ST   -Y,R30
00012a e0a1      	LDI  R26,LOW(1)
00012b 940e 0321 	CALL _lcd_gotoxy
                 ; 0000 0067         sprintf(buffer_2, "%02d:%02d:00", hour, min);
00012d e7e4      	LDI  R30,LOW(_buffer_2)
00012e e0f2      	LDI  R31,HIGH(_buffer_2)
00012f 93fa      	ST   -Y,R31
000130 93ea      	ST   -Y,R30
                +
000131 e7ef     +LDI R30 , LOW ( 2 * _0x0 + ( 15 ) )
000132 e0f0     +LDI R31 , HIGH ( 2 * _0x0 + ( 15 ) )
                 	__POINTW1FN _0x0,15
000133 93fa      	ST   -Y,R31
000134 93ea      	ST   -Y,R30
000135 01f3      	MOVW R30,R6
000136 940e 03bc 	CALL SUBOPT_0x3
000138 01f2      	MOVW R30,R4
000139 940e 03bc 	CALL SUBOPT_0x3
00013b e088      	LDI  R24,8
00013c 940e 02cd 	CALL _sprintf
00013e 962c      	ADIW R28,12
                 ; 0000 0068         lcd_puts(buffer_2);
00013f e7a4      	LDI  R26,LOW(_buffer_2)
000140 e0b2      	LDI  R27,HIGH(_buffer_2)
000141 940e 034f 	CALL _lcd_puts
                 ; 0000 0069         delay_ms(10);
000143 e0aa      	LDI  R26,LOW(10)
000144 e0b0      	LDI  R27,0
000145 940e 03fa 	CALL _delay_ms
                 ; 0000 006A 
                 ; 0000 006B         PORTA.3 = (_clock[2] - hour == 0 && _clock[1] - min == 0);
                +
000147 91e0 028c+LDS R30 , __clock + ( 4 )
000149 91f0 028d+LDS R31 , __clock + ( 4 ) + 1
                 	__GETW1MN __clock,4
00014b 19e6      	SUB  R30,R6
00014c 09f7      	SBC  R31,R7
00014d f449      	BRNE _0xD
                +
00014e 91e0 028a+LDS R30 , __clock + ( 2 )
000150 91f0 028b+LDS R31 , __clock + ( 2 ) + 1
                 	__GETW1MN __clock,2
000152 19e4      	SUB  R30,R4
000153 09f5      	SBC  R31,R5
000154 f411      	BRNE _0xD
000155 e0e1      	LDI  R30,1
000156 c001      	RJMP _0xE
                 _0xD:
000157 e0e0      	LDI  R30,0
                 _0xE:
000158 30e0      	CPI  R30,0
000159 f411      	BRNE _0xF
00015a 98db      	CBI  0x1B,3
00015b c001      	RJMP _0x10
                 _0xF:
00015c 9adb      	SBI  0x1B,3
                 _0x10:
                 ; 0000 006C     }
00015d cf79      	RJMP _0x7
                 ; 0000 006D }
                 _0x11:
00015e cfff      	RJMP _0x11
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _put_buff_G100:
                 ; .FSTART _put_buff_G100
00015f 93ba      	ST   -Y,R27
000160 93aa      	ST   -Y,R26
000161 931a      	ST   -Y,R17
000162 930a      	ST   -Y,R16
000163 81aa      	LDD  R26,Y+2
000164 81bb      	LDD  R27,Y+2+1
000165 9612      	ADIW R26,2
000166 940e 0417 	CALL __GETW1P
000168 9730      	SBIW R30,0
000169 f129      	BREQ _0x2000010
00016a 81aa      	LDD  R26,Y+2
00016b 81bb      	LDD  R27,Y+2+1
00016c 9614      	ADIW R26,4
00016d 940e 0417 	CALL __GETW1P
00016f 018f      	MOVW R16,R30
000170 9730      	SBIW R30,0
000171 f061      	BREQ _0x2000012
                +
000172 3002     +CPI R16 , LOW ( 2 )
000173 e0e0     +LDI R30 , HIGH ( 2 )
000174 071e     +CPC R17 , R30
                 	__CPWRN 16,17,2
000175 f080      	BRLO _0x2000013
000176 01f8      	MOVW R30,R16
000177 9731      	SBIW R30,1
000178 018f      	MOVW R16,R30
                +
000179 81aa     +LDD R26 , Y + 2
00017a 81bb     +LDD R27 , Y + 2 + 1
00017b 9614     +ADIW R26 , 4
00017c 93ed     +ST X + , R30
00017d 93fc     +ST X , R31
                 	__PUTW1SNS 2,4
                 _0x2000012:
00017e 81aa      	LDD  R26,Y+2
00017f 81bb      	LDD  R27,Y+2+1
000180 9612      	ADIW R26,2
000181 940e 03b1 	CALL SUBOPT_0x1
000183 9731      	SBIW R30,1
000184 81ac      	LDD  R26,Y+4
000185 83a0      	STD  Z+0,R26
                 _0x2000013:
000186 81aa      	LDD  R26,Y+2
000187 81bb      	LDD  R27,Y+2+1
000188 940e 0417 	CALL __GETW1P
00018a 23ff      	TST  R31
00018b f012      	BRMI _0x2000014
00018c 940e 03b1 	CALL SUBOPT_0x1
                 _0x2000014:
00018e c006      	RJMP _0x2000015
                 _0x2000010:
00018f 81aa      	LDD  R26,Y+2
000190 81bb      	LDD  R27,Y+2+1
000191 efef      	LDI  R30,LOW(65535)
000192 efff      	LDI  R31,HIGH(65535)
000193 93ed      	ST   X+,R30
000194 93fc      	ST   X,R31
                 _0x2000015:
000195 8119      	LDD  R17,Y+1
000196 8108      	LDD  R16,Y+0
000197 9625      	ADIW R28,5
000198 9508      	RET
                 ; .FEND
                 __print_G100:
                 ; .FSTART __print_G100
000199 93ba      	ST   -Y,R27
00019a 93aa      	ST   -Y,R26
00019b 9726      	SBIW R28,6
00019c 940e 0424 	CALL __SAVELOCR6
00019e e010      	LDI  R17,0
00019f 85ac      	LDD  R26,Y+12
0001a0 85bd      	LDD  R27,Y+12+1
0001a1 e0e0      	LDI  R30,LOW(0)
0001a2 e0f0      	LDI  R31,HIGH(0)
0001a3 93ed      	ST   X+,R30
0001a4 93fc      	ST   X,R31
                 _0x2000016:
0001a5 89ea      	LDD  R30,Y+18
0001a6 89fb      	LDD  R31,Y+18+1
0001a7 9631      	ADIW R30,1
0001a8 8bea      	STD  Y+18,R30
0001a9 8bfb      	STD  Y+18+1,R31
0001aa 9731      	SBIW R30,1
0001ab 91e4      	LPM  R30,Z
0001ac 2f2e      	MOV  R18,R30
0001ad 30e0      	CPI  R30,0
0001ae f409      	BRNE PC+2
0001af c115      	RJMP _0x2000018
0001b0 2fe1      	MOV  R30,R17
0001b1 30e0      	CPI  R30,0
0001b2 f439      	BRNE _0x200001C
0001b3 3225      	CPI  R18,37
0001b4 f411      	BRNE _0x200001D
0001b5 e011      	LDI  R17,LOW(1)
0001b6 c002      	RJMP _0x200001E
                 _0x200001D:
0001b7 940e 03c1 	CALL SUBOPT_0x4
                 _0x200001E:
0001b9 c10a      	RJMP _0x200001B
                 _0x200001C:
0001ba 30e1      	CPI  R30,LOW(0x1)
0001bb f4a9      	BRNE _0x200001F
0001bc 3225      	CPI  R18,37
0001bd f419      	BRNE _0x2000020
0001be 940e 03c1 	CALL SUBOPT_0x4
0001c0 c102      	RJMP _0x20000CC
                 _0x2000020:
0001c1 e012      	LDI  R17,LOW(2)
0001c2 e040      	LDI  R20,LOW(0)
0001c3 e000      	LDI  R16,LOW(0)
0001c4 322d      	CPI  R18,45
0001c5 f411      	BRNE _0x2000021
0001c6 e001      	LDI  R16,LOW(1)
0001c7 c0fc      	RJMP _0x200001B
                 _0x2000021:
0001c8 322b      	CPI  R18,43
0001c9 f411      	BRNE _0x2000022
0001ca e24b      	LDI  R20,LOW(43)
0001cb c0f8      	RJMP _0x200001B
                 _0x2000022:
0001cc 3220      	CPI  R18,32
0001cd f411      	BRNE _0x2000023
0001ce e240      	LDI  R20,LOW(32)
0001cf c0f4      	RJMP _0x200001B
                 _0x2000023:
0001d0 c002      	RJMP _0x2000024
                 _0x200001F:
0001d1 30e2      	CPI  R30,LOW(0x2)
0001d2 f439      	BRNE _0x2000025
                 _0x2000024:
0001d3 e050      	LDI  R21,LOW(0)
0001d4 e013      	LDI  R17,LOW(3)
0001d5 3320      	CPI  R18,48
0001d6 f411      	BRNE _0x2000026
0001d7 6800      	ORI  R16,LOW(128)
0001d8 c0eb      	RJMP _0x200001B
                 _0x2000026:
0001d9 c003      	RJMP _0x2000027
                 _0x2000025:
0001da 30e3      	CPI  R30,LOW(0x3)
0001db f009      	BREQ PC+2
0001dc c0e7      	RJMP _0x200001B
                 _0x2000027:
0001dd 3320      	CPI  R18,48
0001de f010      	BRLO _0x200002A
0001df 332a      	CPI  R18,58
0001e0 f008      	BRLO _0x200002B
                 _0x200002A:
0001e1 c007      	RJMP _0x2000029
                 _0x200002B:
0001e2 e0aa      	LDI  R26,LOW(10)
0001e3 9f5a      	MUL  R21,R26
0001e4 2d50      	MOV  R21,R0
0001e5 2fe2      	MOV  R30,R18
0001e6 53e0      	SUBI R30,LOW(48)
0001e7 0f5e      	ADD  R21,R30
0001e8 c0db      	RJMP _0x200001B
                 _0x2000029:
0001e9 2fe2      	MOV  R30,R18
0001ea 36e3      	CPI  R30,LOW(0x63)
0001eb f449      	BRNE _0x200002F
0001ec 940e 03c8 	CALL SUBOPT_0x5
0001ee 89e8      	LDD  R30,Y+16
0001ef 89f9      	LDD  R31,Y+16+1
0001f0 81a4      	LDD  R26,Z+4
0001f1 93aa      	ST   -Y,R26
0001f2 940e 03ce 	CALL SUBOPT_0x6
0001f4 c0ce      	RJMP _0x2000030
                 _0x200002F:
0001f5 37e3      	CPI  R30,LOW(0x73)
0001f6 f441      	BRNE _0x2000032
0001f7 940e 03c8 	CALL SUBOPT_0x5
0001f9 940e 03d4 	CALL SUBOPT_0x7
0001fb 940e 038d 	CALL _strlen
0001fd 2f1e      	MOV  R17,R30
0001fe c00a      	RJMP _0x2000033
                 _0x2000032:
0001ff 37e0      	CPI  R30,LOW(0x70)
000200 f461      	BRNE _0x2000035
000201 940e 03c8 	CALL SUBOPT_0x5
000203 940e 03d4 	CALL SUBOPT_0x7
000205 940e 0399 	CALL _strlenf
000207 2f1e      	MOV  R17,R30
000208 6008      	ORI  R16,LOW(8)
                 _0x2000033:
000209 6002      	ORI  R16,LOW(2)
00020a 770f      	ANDI R16,LOW(127)
00020b e030      	LDI  R19,LOW(0)
00020c c034      	RJMP _0x2000036
                 _0x2000035:
00020d 36e4      	CPI  R30,LOW(0x64)
00020e f011      	BREQ _0x2000039
00020f 36e9      	CPI  R30,LOW(0x69)
000210 f411      	BRNE _0x200003A
                 _0x2000039:
000211 6004      	ORI  R16,LOW(4)
000212 c002      	RJMP _0x200003B
                 _0x200003A:
000213 37e5      	CPI  R30,LOW(0x75)
000214 f431      	BRNE _0x200003C
                 _0x200003B:
000215 e5ea      	LDI  R30,LOW(_tbl10_G100*2)
000216 e0f0      	LDI  R31,HIGH(_tbl10_G100*2)
000217 83ee      	STD  Y+6,R30
000218 83ff      	STD  Y+6+1,R31
000219 e015      	LDI  R17,LOW(5)
00021a c00c      	RJMP _0x200003D
                 _0x200003C:
00021b 35e8      	CPI  R30,LOW(0x58)
00021c f411      	BRNE _0x200003F
00021d 6008      	ORI  R16,LOW(8)
00021e c003      	RJMP _0x2000040
                 _0x200003F:
00021f 37e8      	CPI  R30,LOW(0x78)
000220 f009      	BREQ PC+2
000221 c0a1      	RJMP _0x2000071
                 _0x2000040:
000222 e6e4      	LDI  R30,LOW(_tbl16_G100*2)
000223 e0f0      	LDI  R31,HIGH(_tbl16_G100*2)
000224 83ee      	STD  Y+6,R30
000225 83ff      	STD  Y+6+1,R31
000226 e014      	LDI  R17,LOW(4)
                 _0x200003D:
000227 ff02      	SBRS R16,2
000228 c014      	RJMP _0x2000042
000229 940e 03c8 	CALL SUBOPT_0x5
00022b 940e 03de 	CALL SUBOPT_0x8
00022d 85ab      	LDD  R26,Y+11
00022e 23aa      	TST  R26
00022f f43a      	BRPL _0x2000043
000230 85ea      	LDD  R30,Y+10
000231 85fb      	LDD  R31,Y+10+1
000232 940e 0408 	CALL __ANEGW1
000234 87ea      	STD  Y+10,R30
000235 87fb      	STD  Y+10+1,R31
000236 e24d      	LDI  R20,LOW(45)
                 _0x2000043:
000237 3040      	CPI  R20,0
000238 f011      	BREQ _0x2000044
000239 5f1f      	SUBI R17,-LOW(1)
00023a c001      	RJMP _0x2000045
                 _0x2000044:
00023b 7f0b      	ANDI R16,LOW(251)
                 _0x2000045:
00023c c004      	RJMP _0x2000046
                 _0x2000042:
00023d 940e 03c8 	CALL SUBOPT_0x5
00023f 940e 03de 	CALL SUBOPT_0x8
                 _0x2000046:
                 _0x2000036:
000241 fd00      	SBRC R16,0
000242 c011      	RJMP _0x2000047
                 _0x2000048:
000243 1715      	CP   R17,R21
000244 f478      	BRSH _0x200004A
000245 ff07      	SBRS R16,7
000246 c008      	RJMP _0x200004B
000247 ff02      	SBRS R16,2
000248 c004      	RJMP _0x200004C
000249 7f0b      	ANDI R16,LOW(251)
00024a 2f24      	MOV  R18,R20
00024b 5011      	SUBI R17,LOW(1)
00024c c001      	RJMP _0x200004D
                 _0x200004C:
00024d e320      	LDI  R18,LOW(48)
                 _0x200004D:
00024e c001      	RJMP _0x200004E
                 _0x200004B:
00024f e220      	LDI  R18,LOW(32)
                 _0x200004E:
000250 940e 03c1 	CALL SUBOPT_0x4
000252 5051      	SUBI R21,LOW(1)
000253 cfef      	RJMP _0x2000048
                 _0x200004A:
                 _0x2000047:
000254 2f31      	MOV  R19,R17
000255 ff01      	SBRS R16,1
000256 c017      	RJMP _0x200004F
                 _0x2000050:
000257 3030      	CPI  R19,0
000258 f0a1      	BREQ _0x2000052
000259 ff03      	SBRS R16,3
00025a c006      	RJMP _0x2000053
00025b 81ee      	LDD  R30,Y+6
00025c 81ff      	LDD  R31,Y+6+1
00025d 9125      	LPM  R18,Z+
00025e 83ee      	STD  Y+6,R30
00025f 83ff      	STD  Y+6+1,R31
000260 c005      	RJMP _0x2000054
                 _0x2000053:
000261 81ae      	LDD  R26,Y+6
000262 81bf      	LDD  R27,Y+6+1
000263 912d      	LD   R18,X+
000264 83ae      	STD  Y+6,R26
000265 83bf      	STD  Y+6+1,R27
                 _0x2000054:
000266 940e 03c1 	CALL SUBOPT_0x4
000268 3050      	CPI  R21,0
000269 f009      	BREQ _0x2000055
00026a 5051      	SUBI R21,LOW(1)
                 _0x2000055:
00026b 5031      	SUBI R19,LOW(1)
00026c cfea      	RJMP _0x2000050
                 _0x2000052:
00026d c04b      	RJMP _0x2000056
                 _0x200004F:
                 _0x2000058:
00026e e320      	LDI  R18,LOW(48)
00026f 81ee      	LDD  R30,Y+6
000270 81ff      	LDD  R31,Y+6+1
000271 940e 041b 	CALL __GETW1PF
000273 87e8      	STD  Y+8,R30
000274 87f9      	STD  Y+8+1,R31
000275 81ee      	LDD  R30,Y+6
000276 81ff      	LDD  R31,Y+6+1
000277 9632      	ADIW R30,2
000278 83ee      	STD  Y+6,R30
000279 83ff      	STD  Y+6+1,R31
                 _0x200005A:
00027a 85e8      	LDD  R30,Y+8
00027b 85f9      	LDD  R31,Y+8+1
00027c 85aa      	LDD  R26,Y+10
00027d 85bb      	LDD  R27,Y+10+1
00027e 17ae      	CP   R26,R30
00027f 07bf      	CPC  R27,R31
000280 f050      	BRLO _0x200005C
000281 5f2f      	SUBI R18,-LOW(1)
000282 85a8      	LDD  R26,Y+8
000283 85b9      	LDD  R27,Y+8+1
000284 85ea      	LDD  R30,Y+10
000285 85fb      	LDD  R31,Y+10+1
000286 1bea      	SUB  R30,R26
000287 0bfb      	SBC  R31,R27
000288 87ea      	STD  Y+10,R30
000289 87fb      	STD  Y+10+1,R31
00028a cfef      	RJMP _0x200005A
                 _0x200005C:
00028b 332a      	CPI  R18,58
00028c f028      	BRLO _0x200005D
00028d ff03      	SBRS R16,3
00028e c002      	RJMP _0x200005E
00028f 5f29      	SUBI R18,-LOW(7)
000290 c001      	RJMP _0x200005F
                 _0x200005E:
000291 5d29      	SUBI R18,-LOW(39)
                 _0x200005F:
                 _0x200005D:
000292 fd04      	SBRC R16,4
000293 c01a      	RJMP _0x2000061
000294 3321      	CPI  R18,49
000295 f420      	BRSH _0x2000063
000296 85a8      	LDD  R26,Y+8
000297 85b9      	LDD  R27,Y+8+1
000298 9711      	SBIW R26,1
000299 f409      	BRNE _0x2000062
                 _0x2000063:
00029a c009      	RJMP _0x20000CD
                 _0x2000062:
00029b 1753      	CP   R21,R19
00029c f010      	BRLO _0x2000067
00029d ff00      	SBRS R16,0
00029e c001      	RJMP _0x2000068
                 _0x2000067:
00029f c013      	RJMP _0x2000066
                 _0x2000068:
0002a0 e220      	LDI  R18,LOW(32)
0002a1 ff07      	SBRS R16,7
0002a2 c00b      	RJMP _0x2000069
0002a3 e320      	LDI  R18,LOW(48)
                 _0x20000CD:
0002a4 6100      	ORI  R16,LOW(16)
0002a5 ff02      	SBRS R16,2
0002a6 c007      	RJMP _0x200006A
0002a7 7f0b      	ANDI R16,LOW(251)
0002a8 934a      	ST   -Y,R20
0002a9 940e 03ce 	CALL SUBOPT_0x6
0002ab 3050      	CPI  R21,0
0002ac f009      	BREQ _0x200006B
0002ad 5051      	SUBI R21,LOW(1)
                 _0x200006B:
                 _0x200006A:
                 _0x2000069:
                 _0x2000061:
0002ae 940e 03c1 	CALL SUBOPT_0x4
0002b0 3050      	CPI  R21,0
0002b1 f009      	BREQ _0x200006C
0002b2 5051      	SUBI R21,LOW(1)
                 _0x200006C:
                 _0x2000066:
0002b3 5031      	SUBI R19,LOW(1)
0002b4 85a8      	LDD  R26,Y+8
0002b5 85b9      	LDD  R27,Y+8+1
0002b6 9712      	SBIW R26,2
0002b7 f008      	BRLO _0x2000059
0002b8 cfb5      	RJMP _0x2000058
                 _0x2000059:
                 _0x2000056:
0002b9 ff00      	SBRS R16,0
0002ba c008      	RJMP _0x200006D
                 _0x200006E:
0002bb 3050      	CPI  R21,0
0002bc f031      	BREQ _0x2000070
0002bd 5051      	SUBI R21,LOW(1)
0002be e2e0      	LDI  R30,LOW(32)
0002bf 93ea      	ST   -Y,R30
0002c0 940e 03ce 	CALL SUBOPT_0x6
0002c2 cff8      	RJMP _0x200006E
                 _0x2000070:
                 _0x200006D:
                 _0x2000071:
                 _0x2000030:
                 _0x20000CC:
0002c3 e010      	LDI  R17,LOW(0)
                 _0x200001B:
0002c4 cee0      	RJMP _0x2000016
                 _0x2000018:
0002c5 85ac      	LDD  R26,Y+12
0002c6 85bd      	LDD  R27,Y+12+1
0002c7 940e 0417 	CALL __GETW1P
0002c9 940e 042b 	CALL __LOADLOCR6
0002cb 9664      	ADIW R28,20
0002cc 9508      	RET
                 ; .FEND
                 _sprintf:
                 ; .FSTART _sprintf
0002cd 92ff      	PUSH R15
0002ce 2ef8      	MOV  R15,R24
0002cf 9726      	SBIW R28,6
0002d0 940e 0426 	CALL __SAVELOCR4
0002d2 940e 03e6 	CALL SUBOPT_0x9
0002d4 9730      	SBIW R30,0
0002d5 f419      	BRNE _0x2000072
0002d6 efef      	LDI  R30,LOW(65535)
0002d7 efff      	LDI  R31,HIGH(65535)
0002d8 c023      	RJMP _0x2080003
                 _0x2000072:
0002d9 01de      	MOVW R26,R28
0002da 9616      	ADIW R26,6
0002db 940e 0404 	CALL __ADDW2R15
0002dd 018d      	MOVW R16,R26
0002de 940e 03e6 	CALL SUBOPT_0x9
0002e0 83ee      	STD  Y+6,R30
0002e1 83ff      	STD  Y+6+1,R31
0002e2 e0e0      	LDI  R30,LOW(0)
0002e3 87e8      	STD  Y+8,R30
0002e4 87e9      	STD  Y+8+1,R30
0002e5 01de      	MOVW R26,R28
0002e6 961a      	ADIW R26,10
0002e7 940e 0404 	CALL __ADDW2R15
0002e9 940e 0417 	CALL __GETW1P
0002eb 93fa      	ST   -Y,R31
0002ec 93ea      	ST   -Y,R30
0002ed 931a      	ST   -Y,R17
0002ee 930a      	ST   -Y,R16
0002ef e5ef      	LDI  R30,LOW(_put_buff_G100)
0002f0 e0f1      	LDI  R31,HIGH(_put_buff_G100)
0002f1 93fa      	ST   -Y,R31
0002f2 93ea      	ST   -Y,R30
0002f3 01de      	MOVW R26,R28
0002f4 961a      	ADIW R26,10
0002f5 dea3      	RCALL __print_G100
0002f6 019f      	MOVW R18,R30
0002f7 81ae      	LDD  R26,Y+6
0002f8 81bf      	LDD  R27,Y+6+1
0002f9 e0e0      	LDI  R30,LOW(0)
0002fa 93ec      	ST   X,R30
0002fb 01f9      	MOVW R30,R18
                 _0x2080003:
0002fc 940e 042d 	CALL __LOADLOCR4
0002fe 962a      	ADIW R28,10
0002ff 90ff      	POP  R15
000300 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G101:
                 ; .FSTART __lcd_write_nibble_G101
000301 93aa      	ST   -Y,R26
000302 b3eb      	IN   R30,0x1B
000303 70ef      	ANDI R30,LOW(0xF)
000304 2fae      	MOV  R26,R30
000305 81e8      	LD   R30,Y
000306 7fe0      	ANDI R30,LOW(0xF0)
000307 2bea      	OR   R30,R26
000308 bbeb      	OUT  0x1B,R30
                +
000309 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00030a 958a     +DEC R24
00030b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00030c 9ada      	SBI  0x1B,2
                +
00030d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00030e 958a     +DEC R24
00030f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000310 98da      	CBI  0x1B,2
                +
000311 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000312 958a     +DEC R24
000313 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000314 c076      	RJMP _0x2080001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000315 93aa      	ST   -Y,R26
000316 81a8      	LD   R26,Y
000317 dfe9      	RCALL __lcd_write_nibble_G101
000318 81e8          ld    r30,y
000319 95e2          swap  r30
00031a 83e8          st    y,r30
00031b 81a8      	LD   R26,Y
00031c dfe4      	RCALL __lcd_write_nibble_G101
                +
00031d e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00031e 958a     +DEC R24
00031f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
000320 c06a      	RJMP _0x2080001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
000321 93aa      	ST   -Y,R26
000322 81e8      	LD   R30,Y
000323 e0f0      	LDI  R31,0
000324 57e2      	SUBI R30,LOW(-__base_y_G101)
000325 4ffd      	SBCI R31,HIGH(-__base_y_G101)
000326 81e0      	LD   R30,Z
000327 81a9      	LDD  R26,Y+1
000328 0fae      	ADD  R26,R30
000329 dfeb      	RCALL __lcd_write_data
00032a 8099      	LDD  R9,Y+1
00032b 8088      	LDD  R8,Y+0
                 _0x2080002:
00032c 9622      	ADIW R28,2
00032d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00032e e0a2      	LDI  R26,LOW(2)
00032f 940e 03ed 	CALL SUBOPT_0xA
000331 e0ac      	LDI  R26,LOW(12)
000332 dfe2      	RCALL __lcd_write_data
000333 e0a1      	LDI  R26,LOW(1)
000334 940e 03ed 	CALL SUBOPT_0xA
000336 e0e0      	LDI  R30,LOW(0)
000337 2e8e      	MOV  R8,R30
000338 2e9e      	MOV  R9,R30
000339 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00033a 93aa      	ST   -Y,R26
00033b 81a8      	LD   R26,Y
00033c 30aa      	CPI  R26,LOW(0xA)
00033d f011      	BREQ _0x2020005
00033e 149b      	CP   R9,R11
00033f f048      	BRLO _0x2020004
                 _0x2020005:
000340 e0e0      	LDI  R30,LOW(0)
000341 93ea      	ST   -Y,R30
000342 9483      	INC  R8
000343 2da8      	MOV  R26,R8
000344 dfdc      	RCALL _lcd_gotoxy
000345 81a8      	LD   R26,Y
000346 30aa      	CPI  R26,LOW(0xA)
000347 f409      	BRNE _0x2020007
000348 c042      	RJMP _0x2080001
                 _0x2020007:
                 _0x2020004:
000349 9493      	INC  R9
00034a 9ad8      	SBI  0x1B,0
00034b 81a8      	LD   R26,Y
00034c dfc8      	RCALL __lcd_write_data
00034d 98d8      	CBI  0x1B,0
00034e c03c      	RJMP _0x2080001
                 ; .FEND
                 _lcd_puts:
                 ; .FSTART _lcd_puts
00034f 93ba      	ST   -Y,R27
000350 93aa      	ST   -Y,R26
000351 931a      	ST   -Y,R17
                 _0x2020008:
000352 81a9      	LDD  R26,Y+1
000353 81ba      	LDD  R27,Y+1+1
000354 91ed      	LD   R30,X+
000355 83a9      	STD  Y+1,R26
000356 83ba      	STD  Y+1+1,R27
000357 2f1e      	MOV  R17,R30
000358 30e0      	CPI  R30,0
000359 f019      	BREQ _0x202000A
00035a 2fa1      	MOV  R26,R17
00035b dfde      	RCALL _lcd_putchar
00035c cff5      	RJMP _0x2020008
                 _0x202000A:
00035d 8118      	LDD  R17,Y+0
00035e 9623      	ADIW R28,3
00035f 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
000360 93aa      	ST   -Y,R26
000361 b3ea      	IN   R30,0x1A
000362 6fe0      	ORI  R30,LOW(0xF0)
000363 bbea      	OUT  0x1A,R30
000364 9ad2      	SBI  0x1A,2
000365 9ad0      	SBI  0x1A,0
000366 9ad1      	SBI  0x1A,1
000367 98da      	CBI  0x1B,2
000368 98d8      	CBI  0x1B,0
000369 98d9      	CBI  0x1B,1
00036a 80b8      	LDD  R11,Y+0
00036b 81e8      	LD   R30,Y
00036c 58e0      	SUBI R30,-LOW(128)
                +
00036d 93e0 0290+STS __base_y_G101 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G101,2
00036f 81e8      	LD   R30,Y
000370 54e0      	SUBI R30,-LOW(192)
                +
000371 93e0 0291+STS __base_y_G101 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G101,3
000373 e1a4      	LDI  R26,LOW(20)
000374 e0b0      	LDI  R27,0
000375 940e 03fa 	CALL _delay_ms
000377 940e 03f3 	CALL SUBOPT_0xB
000379 940e 03f3 	CALL SUBOPT_0xB
00037b 940e 03f3 	CALL SUBOPT_0xB
00037d e2a0      	LDI  R26,LOW(32)
00037e df82      	RCALL __lcd_write_nibble_G101
                +
00037f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
000380 958a     +DEC R24
000381 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000382 e2a8      	LDI  R26,LOW(40)
000383 df91      	RCALL __lcd_write_data
000384 e0a4      	LDI  R26,LOW(4)
000385 df8f      	RCALL __lcd_write_data
000386 e8a5      	LDI  R26,LOW(133)
000387 df8d      	RCALL __lcd_write_data
000388 e0a6      	LDI  R26,LOW(6)
000389 df8b      	RCALL __lcd_write_data
00038a dfa3      	RCALL _lcd_clear
                 _0x2080001:
00038b 9621      	ADIW R28,1
00038c 9508      	RET
                 ; .FEND
                 
                 	.CSEG
                 
                 	.CSEG
                 _strlen:
                 ; .FSTART _strlen
00038d 93ba      	ST   -Y,R27
00038e 93aa      	ST   -Y,R26
00038f 91a9          ld   r26,y+
000390 91b9          ld   r27,y+
000391 27ee          clr  r30
000392 27ff          clr  r31
                 strlen0:
000393 916d          ld   r22,x+
000394 2366          tst  r22
000395 f011          breq strlen1
000396 9631          adiw r30,1
000397 cffb          rjmp strlen0
                 strlen1:
000398 9508          ret
                 ; .FEND
                 _strlenf:
                 ; .FSTART _strlenf
000399 93ba      	ST   -Y,R27
00039a 93aa      	ST   -Y,R26
00039b 27aa          clr  r26
00039c 27bb          clr  r27
00039d 91e9          ld   r30,y+
00039e 91f9          ld   r31,y+
                 strlenf0:
00039f 9005      	lpm  r0,z+
0003a0 2000          tst  r0
0003a1 f011          breq strlenf1
0003a2 9611          adiw r26,1
0003a3 cffb          rjmp strlenf0
                 strlenf1:
0003a4 01fd          movw r30,r26
0003a5 9508          ret
                 ; .FEND
                 
                 	.DSEG
                 _buffer:
000260           	.BYTE 0x14
                 _buffer_2:
000274           	.BYTE 0x14
                 __clock:
000288           	.BYTE 0x6
                 __base_y_G101:
00028e           	.BYTE 0x4
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x0:
0003a6 93ba      	ST   -Y,R27
0003a7 93aa      	ST   -Y,R26
0003a8 81e8      	LD   R30,Y
0003a9 81f9      	LDD  R31,Y+1
0003aa e8a8      	LDI  R26,LOW(__clock)
0003ab e0b2      	LDI  R27,HIGH(__clock)
0003ac 0fee      	LSL  R30
0003ad 1fff      	ROL  R31
0003ae 0fae      	ADD  R26,R30
0003af 1fbf      	ADC  R27,R31
0003b0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x1:
0003b1 91ed      	LD   R30,X+
0003b2 91fd      	LD   R31,X+
0003b3 9631      	ADIW R30,1
0003b4 93fe      	ST   -X,R31
0003b5 93ee      	ST   -X,R30
0003b6 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x2:
0003b7 e0b0      	LDI  R27,0
0003b8 940e 009f 	CALL _check_clock
0003ba 30e0      	CPI  R30,0
0003bb 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x3:
0003bc 940e 040c 	CALL __CWD1
0003be 940e 041f 	CALL __PUTPARD1
0003c0 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:13 WORDS
                 SUBOPT_0x4:
0003c1 932a      	ST   -Y,R18
0003c2 85ad      	LDD  R26,Y+13
0003c3 85be      	LDD  R27,Y+13+1
0003c4 85ef      	LDD  R30,Y+15
0003c5 89f8      	LDD  R31,Y+15+1
0003c6 9509      	ICALL
0003c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0x5:
0003c8 89e8      	LDD  R30,Y+16
0003c9 89f9      	LDD  R31,Y+16+1
0003ca 9734      	SBIW R30,4
0003cb 8be8      	STD  Y+16,R30
0003cc 8bf9      	STD  Y+16+1,R31
0003cd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x6:
0003ce 85ad      	LDD  R26,Y+13
0003cf 85be      	LDD  R27,Y+13+1
0003d0 85ef      	LDD  R30,Y+15
0003d1 89f8      	LDD  R31,Y+15+1
0003d2 9509      	ICALL
0003d3 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:4 WORDS
                 SUBOPT_0x7:
0003d4 89a8      	LDD  R26,Y+16
0003d5 89b9      	LDD  R27,Y+16+1
0003d6 9614      	ADIW R26,4
0003d7 940e 0417 	CALL __GETW1P
0003d9 83ee      	STD  Y+6,R30
0003da 83ff      	STD  Y+6+1,R31
0003db 81ae      	LDD  R26,Y+6
0003dc 81bf      	LDD  R27,Y+6+1
0003dd 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:2 WORDS
                 SUBOPT_0x8:
0003de 89a8      	LDD  R26,Y+16
0003df 89b9      	LDD  R27,Y+16+1
0003e0 9614      	ADIW R26,4
0003e1 940e 0417 	CALL __GETW1P
0003e3 87ea      	STD  Y+10,R30
0003e4 87fb      	STD  Y+10+1,R31
0003e5 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
0003e6 01de      	MOVW R26,R28
0003e7 961c      	ADIW R26,12
0003e8 940e 0404 	CALL __ADDW2R15
0003ea 940e 0417 	CALL __GETW1P
0003ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
0003ed 940e 0315 	CALL __lcd_write_data
0003ef e0a3      	LDI  R26,LOW(3)
0003f0 e0b0      	LDI  R27,0
0003f1 940c 03fa 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xB:
0003f3 e3a0      	LDI  R26,LOW(48)
0003f4 940e 0301 	CALL __lcd_write_nibble_G101
                +
0003f6 e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0003f7 958a     +DEC R24
0003f8 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0003f9 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
0003fa 9610      	adiw r26,0
0003fb f039      	breq __delay_ms1
                 __delay_ms0:
                +
0003fc ef8a     +LDI R24 , LOW ( 0xFA )
0003fd e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
0003fe 9701     +SBIW R24 , 1
0003ff f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000400 95a8      	wdr
000401 9711      	sbiw r26,1
000402 f7c9      	brne __delay_ms0
                 __delay_ms1:
000403 9508      	ret
                 
                 __ADDW2R15:
000404 2400      	CLR  R0
000405 0daf      	ADD  R26,R15
000406 1db0      	ADC  R27,R0
000407 9508      	RET
                 
                 __ANEGW1:
000408 95f1      	NEG  R31
000409 95e1      	NEG  R30
00040a 40f0      	SBCI R31,0
00040b 9508      	RET
                 
                 __CWD1:
00040c 2f6f      	MOV  R22,R31
00040d 0f66      	ADD  R22,R22
00040e 0b66      	SBC  R22,R22
00040f 2f76      	MOV  R23,R22
000410 9508      	RET
                 
                 __EQW12:
000411 17ea      	CP   R30,R26
000412 07fb      	CPC  R31,R27
000413 e0e1      	LDI  R30,1
000414 f009      	BREQ __EQW12T
000415 27ee      	CLR  R30
                 __EQW12T:
000416 9508      	RET
                 
                 __GETW1P:
000417 91ed      	LD   R30,X+
000418 91fc      	LD   R31,X
000419 9711      	SBIW R26,1
00041a 9508      	RET
                 
                 __GETW1PF:
00041b 9005      	LPM  R0,Z+
00041c 91f4      	LPM  R31,Z
00041d 2de0      	MOV  R30,R0
00041e 9508      	RET
                 
                 __PUTPARD1:
00041f 937a      	ST   -Y,R23
000420 936a      	ST   -Y,R22
000421 93fa      	ST   -Y,R31
000422 93ea      	ST   -Y,R30
000423 9508      	RET
                 
                 __SAVELOCR6:
000424 935a      	ST   -Y,R21
                 __SAVELOCR5:
000425 934a      	ST   -Y,R20
                 __SAVELOCR4:
000426 933a      	ST   -Y,R19
                 __SAVELOCR3:
000427 932a      	ST   -Y,R18
                 __SAVELOCR2:
000428 931a      	ST   -Y,R17
000429 930a      	ST   -Y,R16
00042a 9508      	RET
                 
                 __LOADLOCR6:
00042b 815d      	LDD  R21,Y+5
                 __LOADLOCR5:
00042c 814c      	LDD  R20,Y+4
                 __LOADLOCR4:
00042d 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00042e 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
00042f 8119      	LDD  R17,Y+1
000430 8108      	LD   R16,Y
000431 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :  11 r1 :   1 r2 :   0 r3 :   0 r4 :   6 r5 :   3 r6 :   6 r7 :   3 
r8 :   4 r9 :   4 r10:   0 r11:   2 r12:   0 r13:   0 r14:   0 r15:   4 
r16:  34 r17:  24 r18:  29 r19:   8 r20:   9 r21:  17 r22:  13 r23:   3 
r24:  24 r25:   3 r26: 119 r27:  55 r28:  15 r29:   1 r30: 209 r31:  83 
x  :  23 y  : 186 z  :  15 
Registers used: 29 out of 35 (82.9%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   3 add   :   6 
adiw  :  26 and   :   0 andi  :   6 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  21 
brge  :   2 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   8 
brlt  :   0 brmi  :   1 brne  :  33 brpl  :   1 brsh  :   2 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  76 
cbi   :   6 cbr   :   0 clc   :   0 clh   :   0 cli   :   1 cln   :   0 
clr   :  12 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :   7 cpc   :   5 cpi   :  35 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   2 ijmp  :   0 
in    :   5 inc   :   2 jmp   :  26 ld    :  30 ldd   :  79 ldi   : 136 
lds   :  10 lpm   :  14 lsl   :   2 lsr   :   0 mov   :  19 movw  :  21 
mul   :   1 muls  :   0 mulsu :   0 neg   :   2 nop   :   0 or    :   1 
ori   :   8 out   :  17 pop   :   1 push  :   1 rcall :  22 ret   :  30 
reti  :   1 rjmp  :  64 rol   :   2 ror   :   0 sbc   :   4 sbci  :   2 
sbi   :   6 sbic  :   0 sbis  :   0 sbiw  :  17 sbr   :   0 sbrc  :   2 
sbrs  :  10 sec   :   0 seh   :   0 sei   :   1 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   0 spm   :   0 
st    :  72 std   :  31 sts   :   2 sub   :   3 subi  :  16 swap  :   1 
tst   :   4 wdr   :   1 
Instructions used: 58 out of 116 (50.0%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x000864   2076     72   2148   32768   6.6%
[.dseg] 0x000060 0x000292      0     50     50    2048   2.4%
[.eseg] 0x000000 0x000000      0      0      0    1024   0.0%

Assembly complete, 0 errors, 7 warnings
